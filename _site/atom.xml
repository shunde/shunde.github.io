<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>德少的Blog</title>
 <link href="http://shunde.github.com/atom.xml" rel="self"/>
 <link href="http://shunde.github.com"/>
 <updated>2014-08-20T21:18:28+08:00</updated>
 <id>http://shunde.github.com</id>
 <author>
   <name>德少</name>
   <email>shunde.cao@gmail.com</email>
 </author>

 
 <entry>
   <title>通过http代理服务器连接ssh && 通过ssh上传文件</title>
   <link href="http://shunde.github.com/linux/2014/08/02/Connect-SSH-Over-Http-Proxy-Server"/>
   <updated>2014-08-02T00:00:00+08:00</updated>
   <id>http://shunde.github.com/linux/2014/08/02/Connect-SSH-Over-Http-Proxy-Server</id>
   <content type="html">&lt;p&gt;今天要将下载的数据集上传到服务器，但服务器没有连外网，需要通过一个http代理服务器才可以连接上，而ssh是不能直接设置代理服务器的，必须通过tunnel。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;以下是在ubuntu上完成。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;通过http代理服务器连接ssh&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;找个tunnel，比如corkscrew。&lt;/p&gt;

        &lt;p&gt;$sudo apt-get install corkscrew&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;编辑ssh配置文件。将下面代码写入到~/.ssh/config&lt;/p&gt;

        &lt;p&gt;Host *
 ProxyCommand corkscrew proxy_server proxy_port %h %p&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;可以直接使用ssh了。&lt;/p&gt;

        &lt;p&gt;$ssh username@server&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过ssh上传文件到服务器
 scp&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>偏见是如何毁掉一个程序员的？</title>
   <link href="http://shunde.github.com/%E9%9A%8F%E7%AC%94/2014/06/07/how_prejudice_destroy_a_programmer"/>
   <updated>2014-06-07T00:00:00+08:00</updated>
   <id>http://shunde.github.com/%E9%9A%8F%E7%AC%94/2014/06/07/how_prejudice_destroy_a_programmer</id>
   <content type="html">&lt;p&gt;最近在思考那些我本该学好的技术却没有学好的原因，我找到了，源于我对那些技术先入为主的偏见。这些偏见让我与这些技术擦肩而过。如果刚开始学习某种技术，你认为这种技术过时，很low，不如另一种技术好，你还会有深入学习的打算吗？我不会，但如果这种认识是错误的呢？！来看下我大学四年的偏见们：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;流程图没有必要&lt;br /&gt;
 大一的时候写实验报告，老师总让我们写上代码的同时，附上流程图。流程图本该在代码之前就形成，而我总是先写了代码，后根据代码画流程图，这就有违流程图的初衷。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;流程图是个过时的玩意，它总是在项目完成后写文档时根据代码画起来的，这与流程图的目的背道而驰，是项目经理的无理要求的产物，应该摒弃之…
 原文不记得在哪看到的，大概就是这个意思，我当时看到了觉得很有道理，和我目前遇到的困境一样，说到我心坎了，于是乎我在写代码之前从不画流程图，还很反感老师要求实验报告上要求画上流程图。  &lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;实际上流程图可以帮助我们理清思路，想清楚问题，更快地写出bug free的代码，而我却保持这个愚蠢的偏见好多年。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MFC是个过时的框架 &lt;br /&gt;
 大一下学期的时候，对只会写控制台程序很是困扰，这些控制台程序在那时我看来一点都不像个程序，没有实用价值，想写个有图形界面的程序，那才叫“真正”的程序。然后知道了有MFC这个东西，了解到它是对win32 API的封装，也写了一些小的程序。用向导创建一个空项目，一路next，然后生产了一堆看不懂的代码，在需要的地方加上自己的代码就完成了一个程序，如果不小心修改了或者删除了生成的代码，恭喜你，程序会编译不通过，而且还各种看不懂，这让我很是慌乱。不过这都不是事，阻挡不了我继续学习的决心，直到我不知在哪里看了下面的这段文字：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;C++之父曾经说过：即使是80年代中期，MFC也达不到一个良好OO设计的要求，它是使用最多却是糟糕的基础库。它违反了一个好的C++设计应当遵循的大多数原则，严重扭曲了许多程序员对于什么是C++的看法。&lt;br /&gt;
MFC使用了大量的宏，让人欲哭无泪。MFC的封装带来了方便，也对了解机制引入了复杂性。目前，MFC在企业中很少应用了，已经过是了。  &lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;即使进入了机器人足球队，对windows编程还有些要求的，我还是止步于仅读了一遍孙鑫的《VC++深入详解》,没有在这条路上走下去。如果理解了一套图形界面的库，其他的像Qt, gtk什么的应够都差不多，可以很快地入手。偏见让我止步。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;html+javascript+css 都太低端了，没啥技术含量&lt;br /&gt;
 大一上的时候因为好奇加入了沁水青山BBS和校社联的信息编辑部（现在撤销了:( ），第一次接触到网页设计制作这个东西，后来用html+css调样式让我烦躁，我讨厌调UI，繁琐不说，觉得没啥技术含量，这不是一个程序员该做的事情，恩，当时我就是这么想的。我想要做的是后台开发，前台技术含量不够，前端的东西我也就学了个皮毛，没有深入。大一下加入了阿豆工作室，由于有些基础，而且比较积极，被当时工作室的主管看中了，我就当上了下一届的主管。在阿豆主要学的是asp.net，然后以大二下的时候以做了一个视频网站收官。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对人对事的偏见&lt;br /&gt;
 我是一个普通人，当我不认同某人时，很可能会对之有偏见，然后看不到TA身上的发光点了，这会让我失去向TA看齐向TA学习的机会。还好，我认识到了这点，看不惯某些人和事肯定是我自身修养不够，大师看大家都是平常心嘛！&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;想想偏见真够可怕的，扼杀我于无形。这让我更加慎重地对待网上及其他人对某件事的看法，警惕陷入先入为主的境地，欲探个究竟，亲身经历便是。&lt;/p&gt;

&lt;p&gt;-EOF-&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Nginx源码研究之开篇 (未完待更...)</title>
   <link href="http://shunde.github.com/nginx/2014/05/21/NginxCodeReview_Start"/>
   <updated>2014-05-21T00:00:00+08:00</updated>
   <id>http://shunde.github.com/nginx/2014/05/21/NginxCodeReview_Start</id>
   <content type="html">&lt;p&gt;先看下Nginx源码的目录结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/home/shunde/nginx-1.6.0/
├── auto              自动检测系统环境以及编译相关的脚本
│   ├── cc            关于编译相关的编译选项的检测脚本
│   ├── lib           nginx 编译所需要的一些库的检测脚本
│   ├── os            与平台相关的一些系统参数与系统调用相关的检测
│   └── types         与数据类型相关的一些辅助脚本
├── conf              存放默认配置文件，在make install后，会拷贝到安装目录中去
├── contrib           存放一些适用工具，如geo配置生成工具（geo2nginx.pl）
├── html              存放默认的网页文件，在make install后，会拷贝到安装目录中去
├── man               nginx的man手册
└── src               存放nginx的源代码
    ├── core          nginx的核心源代码，包括常用数据结构的定义，以及nginx初始化运行的核心代码如main函数
    ├── event         对系统事件处理机制的封装，以及定时器的实现相关代码
    │   └── modules   不同事件处理方式的模块化，如select、poll、epoll、kqueue等
    ├── http          nginx作为http服务器相关的代码
    │   └── modules   包含http的各种功能模块
    ├── mail          nginx作为邮件代理服务器相关的代码
    ├── misc          一些辅助代码，测试c++头的兼容性，以及对google_perftools的支持
    └── os            主要是对各种不同体系统结构所提供的系统函数的封装，对外提供统一的系统调用接口
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们来进入main函数窥探下nginx的启动：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;调用&lt;code&gt;ngx_debug_init()&lt;/code&gt; debug初始化&lt;/li&gt;
  &lt;li&gt;调用&lt;code&gt;ngx_get_options()&lt;/code&gt;解析命令参数&lt;/li&gt;
  &lt;li&gt;调用&lt;code&gt;ngx_time_init()&lt;/code&gt;初始化并更新时间&lt;/li&gt;
  &lt;li&gt;调用&lt;code&gt;ngx_regex_init()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Say hello</title>
   <link href="http://shunde.github.com/%E9%9A%8F%E7%AC%94/2014/05/03/say-hello"/>
   <updated>2014-05-03T00:00:00+08:00</updated>
   <id>http://shunde.github.com/%E9%9A%8F%E7%AC%94/2014/05/03/say-hello</id>
   <content type="html">&lt;p&gt;大家好，我是德少:)&lt;br /&gt;
以后我会在这里跟大家分享自己的学习生活的点点滴滴，嗯，加油！！！&lt;br /&gt;
也欢迎大家通过评论或邮件的方式与我互动^_^  &lt;/p&gt;

</content>
 </entry>
 
 
</feed>